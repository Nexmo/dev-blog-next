#!/usr/bin/env node

const autocomplete = require('inquirer-autocomplete-prompt')
const consola = require('consola')
const fs = require('fs')
const inquirer = require('inquirer')
const path = require("path")
const slugify = require('slugify')
const yaml = require('yaml')

inquirer.registerPrompt('autocomplete', autocomplete)

const styleGuide = String(fs.readFileSync(path.resolve(__dirname, '../.github/WRITING_STYLE.md')))
const categories = require('../content/categories.json')['categories']
const authors = require('../content/authors.json')['authors']

const slugifyOpt = {
  replacement: '-',
  lower: true,
  strict: true
}

inquirer
  .prompt([
    {
      type: 'input',
      name: 'title',
      message: 'What\'s the title for this post? <max 70 chars>'
    },
    {
      type: 'input',
      name: 'description',
      message: 'What\'s the description? <max 240 chars>'
    },
    {
      type: 'list',
      name: 'category',
      message: 'What\'s the category?',
      choices: () => {
        return categories.map(c => {
          return {
            name: c.plural,
            value: c.slug,
            short: c.name
          }
        })
      }
    },
    {
      type: 'autocomplete',
      name: 'author',
      message: 'Who\'s the author?',
      source: (answers, input) => {
        let opts = authors

        if (input !== undefined) {
          opts = authors.filter(a => a.name.includes(input) || a.username.includes(input))
        }

        return [{ name: 'Other', value: 'tbc' }, ...opts]
      }
    },
    {
      type: 'confirm',
      name: 'comments',
      message: 'Enable comments?'
    },
    {
      type: 'confirm',
      name: 'spotlight',
      message: 'By spotlight author?',
      default: false
    }
  ])
  .then(answers => {
    const slug = slugify(answers.title, slugifyOpt)
    const filename = `content/blog/${slug}.md`
    const output = {
      title: answers.title,
      description: answers.description,
      author: answers.author,
      comments: answers.comments,
      category: answers.category,
      spotlight: answers.spotlight,
      thumbnail: 'tbc',
      published: true,
      published_at: (new Date).toISOString(),
      tags: ['your', 'tags', 'here']
    }

    const markdown = '---\n' + yaml.stringify(output) + '---\n\n' + styleGuide

    fs.writeFile(filename, markdown, (error) => {
      if (!error) {
        consola.success(`Saved demo file to \`${filename}\`...`)
      } else {
        consola.error(error)
      }
    })
  })
  .catch(error => {
    consola.error(error)
  })