{"_filedata":{"slug":"sms-notifications-google-sheets-nodered-dr"},"title":"Sending Group Notifications with Google Sheets and Node-RED","description":"","thumbnail":"https://www.nexmo.com/wp-content/uploads/2020/03/TW_Google-Sheet-Notifications_1200x675-1.png","author":256,"published":true,"published_at":"2020-03-06T13:16:53","tags":[1126,1702,1557,1625,92],"body":"<p>Ever got a phone call at 7:59 AM telling you your kid&#8217;s school is closed? It was handy, as you were only a couple miles away &#8211; on your way home, after dropping them off.</p>\n<p>The announcement process in most schools is still manual nowadays, which works in most cases. When something unexpected happens though, like the school is snowed in, a handful of people scramble to call hundreds of parents. You might get the notification in time, or you could be part of the lucky bunch that ended up in the last batch at 7:59.</p>\n<p>In this tutorial we&#8217;re going to build a Node-RED flow that programmatically sends out notifications to a list of contacts, using Google Sheets and the Nexmo SMS API.</p>\n<p>Follow along and pitch it to the principal? Saves you being stuck in traffic on a snow day.</p>\n<h2>Prerequisites</h2>\n<p>Before getting started, you’ll need a few things:</p>\n<ul>\n<li>A <a href=\"https://nodered.org/docs/getting-started/installation\">Node-RED</a> installation, be it a hosted version or on your machine</li>\n<li>A <a href=\"https://myaccount.google.com/\">Google account</a></li>\n<li>A Nexmo account — <a href=\"https://dashboard.nexmo.com/sign-up\">create one for free</a> if you haven&#8217;t already</li>\n<li>A way to expose your server to the internet. This either means you&#8217;re running a hosted version of Node-RED or using a tunneling service like <a href=\"https://flows.nodered.org/node/node-red-contrib-ngrok\">ngrok</a> &#8211; get up to speed with this <a href=\"https://www.nexmo.com/blog/2019/07/03/ngrok-in-node-red-dr/\">Getting Started with Ngrok in Node-RED</a> tutorial</li>\n</ul>\n<h2>Setting Up Your Editor</h2>\n<p>Once you open your Node-RED Editor, make sure you have the following packages installed:</p>\n<ul>\n<li><a href=\"http://flows.nodered.org/node/node-red-contrib-google-sheets\">node-red-contrib-google-sheets</a></li>\n<li><a href=\"https://flows.nodered.org/node/node-red-contrib-nexmo\">node-red-contrib-nexmo</a>  </li>\n</ul>\n<p>To do this, click on the hamburger menu, select <em>Manage Palette</em>. Check for already installed packages under <em>Nodes</em>, and get new ones from the <em>Install</em> tab.</p>\n<p>When you&#8217;re done, make sure to restart Node-RED and you&#8217;re good to go!</p>\n<h2>Configuring Your Google Account</h2>\n<p>To interact with the <em>Google Sheets API</em>, you&#8217;ll need to use a service account &#8211; an identity that an instance can use to run API requests on your behalf. It will be used to identify apps running on your instance to other Google Cloud services.</p>\n<p>In this case, your flow that reads a Google Sheet must first authenticate to the Google Sheets API.</p>\n<p>You&#8217;ll have to create a service account and grant it access to the Google Sheets API. Next, update your app to pass the service account credentials to the Google Sheets API. This way, your flow authenticates seamlessly to the API without embedding any secret keys or user credentials.</p>\n<h3>Step 1: Create a New Service Account</h3>\n<p>We&#8217;ll start by creating a new project on the <a href=\"https://console.cloud.google.com/projectselector2/iam-admin/serviceaccounts?_ga=2.184919274.-272657095.1578084478&amp;supportedpurview=project\">Service Accounts Page</a> of the Google Cloud Platform. Click on <em>CREATE</em> to get started.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/google-service-accounts-create-project.png\" alt=\"google service accounts create project\" class=\"alignnone size-full wp-image-31524\" /></p>\n<p>Next, give your project a name, either select an organization or leave it blank, then press <em>CREATE</em>.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/google-service-accounts-name-project.png\" alt=\"google service accounts name project\" class=\"alignnone size-full wp-image-31525\" /></p>\n<p>You&#8217;ll shortly see a notification pop up that your project has been created.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/google-service-accounts-project-created.png\" alt=\"google service accounts project created\" class=\"alignnone size-full wp-image-31526\" /></p>\n<p>Now that you have a project, let&#8217;s add a service account to it!</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/google-create-service-account.png\" alt=\"google create service account\" class=\"alignnone size-full wp-image-31520\" /></p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/google-name-service-account.png\" alt=\"google name service account\" class=\"alignnone size-full wp-image-31521\" /></p>\n<p>Next, you&#8217;ll need to create a key that you&#8217;ll use to authenticate with the GSheet node in your flow. Click on <em>Create Key</em>, then select <em>JSON</em> as a key type. Save this file when prompted &#8211; keep it handy as you&#8217;ll need it soon, then hit <em>Done</em>.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/google-service-accounts-create-key.png\" alt=\"google service accounts create key\" class=\"alignnone size-full wp-image-31523\" /></p>\n<h3>Step 2: Enable Google Sheets API for Your Project</h3>\n<p>From the hamburger menu select <em>APIs and Services</em> -> <em>Dashboard</em>, then click the <em>ENABLE APIS AND SERVICES</em> button. Look for the <em>Google Sheets API</em> in the API Library, open it and click <em>Enable</em>.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/google-sheets-enable-api-for-project.gif\" alt=\"google sheets enable api for project\" class=\"alignnone gif-player size-full wp-image-31530\" /></p>\n<h3>Step 3: Sharing Google Sheets with Your Service Account</h3>\n<p>Go to the <em>Service Accounts</em> page and make a note of the email address associated with the service account you&#8217;ve just created. You&#8217;ll need to use this email address to share your spreadsheets with the Service Account.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/google-service-accouns-email.png\" alt=\"google service accouns email\" class=\"alignnone size-full wp-image-31522\" /></p>\n<h2>Sending Group Notifications with Google Sheets and Node-RED</h2>\n<h3>Create a Spreadsheet</h3>\n<p>In case you don&#8217;t have a Google Sheet ready, go ahead and create one now.</p>\n<p>Google Sheets use a cell-matrix system, where each column can be identified with a letter (starting with A as the first column) and rows are numbered (1 being the first row). In case you&#8217;d like to select the second element of the first row, this would be <strong>B1</strong>.</p>\n<p>You can also select ranges of cells by using the <strong>TOP_LEFTMOST_CELL:BOTTOM_RIGHTMOST_CELL</strong> notation. For example, to select the second and third element of rows 1-5, use <strong>B1:C5</strong>.</p>\n<p>After creating a spreadsheet you&#8217;ll see a <em>Sheet1</em> tab at the bottom of the screen, which is the worksheet you&#8217;re currently one. You can rename it or add more worksheets to your spreadsheet.</p>\n<p>For this tutorial, I&#8217;m using one worksheet with 4 columns: Name, Surname, Phone, and Email &#8211; you&#8217;ll need at least 2 rows of data to follow along.<br />\nMake sure you add a phone number you have access to, so that you can test your flow later on.</p>\n<p>Once your spreadsheet is ready, it&#8217;s time to share it with your Service Account.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/gsheets-share-google-sheet.png\" alt=\"google sheets share google sheet\" class=\"alignnone size-full wp-image-31537\" /></p>\n<h3>Getting the Data from Your Google Sheet</h3>\n<p>Start your flow by adding a <strong>GSheet</strong> node to your workspace. Configure this node to pull in the data from your Google Sheet by filling out the following fields accordingly:</p>\n<table>\n<thead>\n<tr>\n<th>PARAMETERS</th>\n<th>DESCRIPTION</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Creds</strong></td>\n<td>Press the edit button to provide your Service Account key. Remember the JSON file you downloaded earlier? Copy and paste this JSON key in the text field.</td>\n</tr>\n<tr>\n<td><strong>Method</strong></td>\n<td>Select <em>Get Cells</em> from the drop-down menu. This will grab the data from the Google Sheet and pull it into your flow.</td>\n</tr>\n<tr>\n<td><strong>SpreadsheetID</strong></td>\n<td>You can figure out your spreadsheet ID from the URL of your Google Sheet. For example, if the URL is <em>https://docs.google.com/spreadsheets/d/1mmXhj40aeSooxmtku3ma4auLyrHhO8xCSQsklZ1_BU/edit#gid=0</em>, the SpreadsheetID will be the string found in between <code>d/</code> and <code>/edit</code>:  <em>1mmXhj40aeSooxmtku3ma4auLyrHhO8xCSQsklZ1_BU</em>. Have a look at your spreadsheet URL and find your SpreadSheetID. Then paste this string in the <strong>SpreadSheetID</strong> field.</td>\n</tr>\n<tr>\n<td><strong>Cells</strong></td>\n<td>Select the cells where your data is located on the spreadsheet. In the example below, this value will be: <code>Sheet1!A2:D30</code>, as the data is found on the worksheet named &#8220;Sheet1&#8221;, in columns A-D on rows 2-30. Note that we&#8217;re not including the table headers.</td>\n</tr>\n</tbody>\n</table>\n<p>Once you&#8217;re done editing the <strong>GSheet</strong> node, press <em>Done</em>.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/google-sheets-node-setup.gif\" alt=\"google sheets node setup\" class=\"alignnone gif-player size-full wp-image-31532\" /></p>\n<p>Next, let&#8217;s have a look at the data we&#8217;re getting from the Google Sheets API.</p>\n<p>Add an <strong>inject</strong> and a <strong>debug</strong> node to your workspace and connect them to the <strong>GSheet</strong> one. Hit <em>Deploy</em>, click on the <strong>inject</strong> node&#8217;s button, then have a look at your debug sidebar.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/google-sheet-node.png\" alt=\"google sheets node\" class=\"alignnone size-full wp-image-31527\" /></p>\n<p>You&#8217;ll notice that the response in <strong>msg.payload</strong> is an array of arrays, each of these arrays having 4 elements &#8211; one line worth of data.</p>\n<h4>Split the msg.payload Array</h4>\n<p>This data structure isn&#8217;t ideal for further processing, so let&#8217;s split the array of arrays into individual arrays.</p>\n<p>Fortunately, there is a default node already in your palette that will do the heavy lifting for you.</p>\n<p>Find the <strong>split</strong> node under <em>sequence</em> in your node palette o the left side of your screen. Add it to your workspace, connect it after the <strong>GSheet</strong> node, follow with a <strong>debug</strong>, then press <em>Deploy</em> and run your flow again.</p>\n<p>Glance over to the debug sidebar and notice the response coming through as a sequence of individual arrays. This way we can process them one at a time, as they are coming in.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/gsheets-sms-split-node.png\" alt=\"google sheets sms split node\" class=\"alignnone size-full wp-image-31539\" /></p>\n<h4>Set Delay</h4>\n<p>In most cases, you wouldn&#8217;t want to send out messages at this speed, be it via email, SMS or the channel of your choice.</p>\n<p>For example, the Nexmo SMS API has a <a href=\"https://help.nexmo.com/hc/en-us/articles/203993598-What-is-the-Throughput-Limit-for-Outbound-SMS-\">throughput limit</a> for outbound SMS &#8211; all API keys are set with 30 API request per second throughput restriction by default. On top of this, there are also restrictions when sending from certain numbers, so you might be restricted to 1 SMS per second.</p>\n<p>To make sure you&#8217;re not reaching the throughput limits, it&#8217;s a good idea to set a delay on each array coming through <strong>msg.payload</strong>.</p>\n<p>To do this, find the <strong>delay</strong> node in the <em>function</em> section of your node palette, and connect it after the <strong>split</strong> node. Double-click on it to open up the node properties and set the delay to 1 second &#8211; this should cover most use cases, but feel free to adjust it as needed.</p>\n<h3>Preparing the Message</h3>\n<p>At this point, we have all the information we need about the recipients, so let&#8217;s move on to the message!</p>\n<p>Although you could send the same message to all recipients, it&#8217;s always a good idea to make it a little more personal. Getting the bad news is frustrating enough, and a bad user experience won&#8217;t make it any better.</p>\n<p>Adding a bit of templating won&#8217;t only give your message a personal touch, it will also make it appear more professional.</p>\n<p>Add a <strong>template</strong> node after <strong>delay</strong>. Double-click on it, set <em>Property</em> to <strong>msg.text</strong> and get creative with your message in the text field!</p>\n<p>This text field supports <a href=\"https://mustache.github.io/\">Mustache templating</a>, so you could start with greeting the recipient using their name: <code>{{payload.0}}</code>. This expression references the first element of the <strong>msg.payload</strong> array, the recipient&#8217;s first name.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/gsheets-sms-template-node.png\" alt=\"google sheets sms template node\" class=\"alignnone size-full wp-image-31541\" /></p>\n<p>When you&#8217;re done editing, press <em>Done</em>, then <em>Deploy</em>.</p>\n<h3>Sending SMS Notifications</h3>\n<p>There are many channels available to deliver your notifications, but in bad weather conditions SMS might be your best bet, so we&#8217;ll start with this option.</p>\n<p>To send the SMS messages, we&#8217;ll use the Nexmo <a href=\"https://developer.nexmo.com/api/sms\">SMS API</a>.</p>\n<p>Scroll down to the <em>nexmo</em> section of your node palette and add <strong>sendsms</strong> to your workspace, connected after the <strong>template</strong> node.</p>\n<p>Set up this node by double-clicking on it and filling in the parameters below. You&#8217;ll find <em>API KEY</em> and <em>API SECRET</em> by clicking on the edit button next to <em>Nexmo Credentials</em>.</p>\n<table>\n<thead>\n<tr>\n<th>KEY</th>\n<th>DESCRIPTION</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>API KEY</strong></td>\n<td>Your Nexmo API key, shown in your <a href=\"https://dashboard.nexmo.com/getting-started-guide\">account overview</a>.</td>\n</tr>\n<tr>\n<td><strong>API SECRET</strong></td>\n<td>Your Nexmo API secret, shown in your <a href=\"https://dashboard.nexmo.com/getting-started-guide\">account overview</a>.</td>\n</tr>\n<tr>\n<td><strong>TO</strong></td>\n<td>The number you are sending the SMS to, <code>{{msg.payload.2}}</code> in this case.</td>\n</tr>\n<tr>\n<td><strong>FROM</strong></td>\n<td>The number or text shown on a handset when it displays your message. You can also set a custom alphanumeric FROM value if this feature is <a href=\"https://help.nexmo.com/hc/en-us/articles/115011781468\">supported in your country</a>.</td>\n</tr>\n<tr>\n<td><strong>TEXT</strong></td>\n<td>The content of your message. Use <code>{{msg.text}}</code> to reference the templated message you&#8217;ve created earlier.</td>\n</tr>\n</tbody>\n</table>\n<p>Make sure <em>Unicode</em> is ticked to keep the formatting of your message, then press <em>Done</em> and <em>Deploy</em>.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/gsheets-sendsms-node-setup.png\" alt=\"google sheets send sms node setup\" class=\"alignnone size-full wp-image-31535\" /></p>\n<p>Run your flow again and see your templated messages appear in the debug sidebar.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/gsheets-templated-sms-debug.png\" alt=\"google sheets templated sms in debug\" class=\"alignnone size-full wp-image-31542\" /></p>\n<h3>Delivery Receipts</h3>\n<p>When you make a successful request to the SMS API, it returns an array of message objects. Ideally, each of these has a status of 0, indicating that your message has successfully been scheduled for sending. These are the response objects that you&#8217;ve just seen in the debug area.</p>\n<p>While inspecting this output is quite helpful in determining what the Nexmo SMS API did, there is no guarantee that the message reached the recipient&#8217;s handset. Not exactly what you want to hear while sending out snow day alerts, is it?</p>\n<p>Once the message reaches its destination, the carrier returns a <a href=\"https://developer.nexmo.com/messaging/sms/guides/delivery-receipts\"><strong>Delivery Receipt</strong></a> to Nexmo – so don&#8217;t panic! All you need to do is set up a webhook endpoint that Nexmo can forward these <strong>Delivery Receipts</strong> to.</p>\n<p>Connect a <strong>http</strong> input node to a <strong>http response</strong> node, as well as to a <strong>debug</strong> node, then fill in the <em>URL</em> field with <code>/receipt</code> in the <strong>http</strong> input node.</p>\n<p>Next, you&#8217;ll have to let the Nexmo SMS API know where it should forward the delivery receipts. Go to your <a href=\"https://dashboard.nexmo.com/settings\">API settings</a> in the <strong>Default SMS Setting</strong> section.<br />\nSet the default webhook URL for delivery receipts to <code>YOUR_URL/receipt</code>, then <em>Save changes</em>.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/default-sms-settings-nexmo-dashboard.png\" alt=\"default sms settings nexmo dashboard\" class=\"alignnone size-full wp-image-31519\" /></p>\n<p>Now you can rest assured that your snow day notifications have indeed reached everyone on your list! Don&#8217;t take my word for it though, head over to the debug sidebar and read through your delivery receipts.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/gsheets-sms-event-webhook.png\" alt=\"google sheets sms event webhook\" class=\"alignnone size-full wp-image-31538\" /></p>\n<h2>Where Next?</h2>\n<h3>Extra Credit: Write Your Delivery Receipts to the Google Sheet</h3>\n<p>Although the debug sidebar gives you all the insight you&#8217;ll ever need, sometimes it&#8217;s easier to grasp the result if the data is presented in a more organized fashion.</p>\n<p>In this section, we&#8217;ll look into writing your delivery receipts back to the same spreadsheet, on a different worksheet(tab).</p>\n<h4>Pick Your Data</h4>\n<p>The delivery receipts will contain the following properties of the <strong>msg.payload</strong> object:</p>\n<table>\n<thead>\n<tr>\n<th>PROPERTY</th>\n<th>DESCRIPTION</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>msisdn</td>\n<td>The number the message was sent to.</td>\n</tr>\n<tr>\n<td>to</td>\n<td>Your Nexmo number or the SenderID you&#8217;ve set when sending the SMS.</td>\n</tr>\n<tr>\n<td>network-code</td>\n<td>The Mobile Country Code Mobile Network Code (MCCMNC) of the carrier the destination phone number is registered with.</td>\n</tr>\n<tr>\n<td>messageId</td>\n<td>The Nexmo ID for this message.</td>\n</tr>\n<tr>\n<td>price</td>\n<td>The cost of this message.</td>\n</tr>\n<tr>\n<td>status</td>\n<td>Will be one of: <em>delivered</em>, <em>expired</em>, <em>failed</em>, <em>rejected</em>, <em>accepted</em>, <em>buffered</em> or <em>unknown</em>, based on where the message is in the delivery process.</td>\n</tr>\n<tr>\n<td>scts</td>\n<td>When the delivery receipt was received from the carrier in <em>YYMMDDHHMM</em> format. For example, 2001011400 is at 2020-01-01 14:00</td>\n</tr>\n<tr>\n<td>err-code</td>\n<td>The status of the request. Will be a non 0 value in case of an error. See the <a href=\"https://developer.nexmo.com/messaging/sms/guides/delivery-receipts#dlr-error-codes\">Delivery Receipt documentation</a> for more details.</td>\n</tr>\n<tr>\n<td>api-key</td>\n<td>Your Nexmo API key.</td>\n</tr>\n<tr>\n<td>message-timestamp</td>\n<td>The time when Nexmo started to push this Delivery Receipt to your webhook endpoint.</td>\n</tr>\n</tbody>\n</table>\n<p>Decide on which of these parameters matter to you, then using a <strong>change</strong> node, set <strong>msg.payload</strong> to an array of the respective properties.</p>\n<p>For example, I&#8217;m interested in the timestamp, recipient&#8217;s number, status, error code and message ID, so I&#8217;ll set <strong>msg.payload</strong> to the following <em>expression</em>:</p>\n<p></p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->\r\n\r\n\t\t<div id=\"crayon-5e9c0bcd7bc5a043684490\" class=\"crayon-syntax crayon-theme-nexmo-2018 crayon-font-monaco crayon-os-pc print-yes notranslate\" data-settings=\" minimize scroll-mouseover\" style=\" margin-top: 24px; margin-bottom: 24px; font-size: 14px !important; line-height: 22px !important;\">\r\n\t\t\r\n\t\t\t<div class=\"crayon-toolbar\" data-settings=\" show\" style=\"font-size: 14px !important;height: 21px !important; line-height: 21px !important;\"><span class=\"crayon-title\"></span>\r\n\t\t\t<div class=\"crayon-tools\" style=\"font-size: 14px !important;height: 21px !important; line-height: 21px !important;\"><div class=\"crayon-button crayon-nums-button\" title=\"Toggle Line Numbers\"><div class=\"crayon-button-icon\"></div></div><div class=\"crayon-button crayon-wrap-button\" title=\"Toggle Line Wrap\"><div class=\"crayon-button-icon\"></div></div><div class=\"crayon-button crayon-expand-button\" title=\"Expand Code\"><div class=\"crayon-button-icon\"></div></div><div class=\"crayon-button crayon-copy-button\" title=\"Copy\"><div class=\"crayon-button-icon\"></div></div><div class=\"crayon-button crayon-popup-button\" title=\"Open Code In New Window\"><div class=\"crayon-button-icon\"></div></div></div></div>\r\n\t\t\t<div class=\"crayon-info\" style=\"min-height: 19.6px !important; line-height: 19.6px !important;\"></div>\r\n\t\t\t<div class=\"crayon-plain-wrap\"><textarea wrap=\"soft\" class=\"crayon-plain print-no\" data-settings=\"dblclick\" readonly style=\"-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 22px !important;\">\n[payload.`message-timestamp`, payload.msisdn, payload.status, payload.`err-code`, payload.messageId]\n</textarea></div>\r\n\t\t\t<div class=\"crayon-main\" style=\"\">\r\n\t\t\t\t<table class=\"crayon-table\">\r\n\t\t\t\t\t<tr class=\"crayon-row\">\r\n\t\t\t\t<td class=\"crayon-nums \" data-settings=\"show\">\r\n\t\t\t\t\t<div class=\"crayon-nums-content\" style=\"font-size: 14px !important; line-height: 22px !important;\"><div class=\"crayon-num\" data-line=\"crayon-5e9c0bcd7bc5a043684490-1\">1</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9c0bcd7bc5a043684490-2\">2</div></div>\r\n\t\t\t\t</td>\r\n\t\t\t\t\t\t<td class=\"crayon-code\"><div class=\"crayon-pre\" style=\"font-size: 14px !important; line-height: 22px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;\"><div class=\"crayon-line\" id=\"crayon-5e9c0bcd7bc5a043684490-1\"><span class=\"crayon-sy\">[</span><span class=\"crayon-v\">payload</span><span class=\"crayon-sy\">.</span><span class=\"crayon-sy\">`</span><span class=\"crayon-v\">message</span><span class=\"crayon-o\">-</span><span class=\"crayon-v\">timestamp</span><span class=\"crayon-sy\">`</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">payload</span><span class=\"crayon-sy\">.</span><span class=\"crayon-v\">msisdn</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">payload</span><span class=\"crayon-sy\">.</span><span class=\"crayon-v\">status</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">payload</span><span class=\"crayon-sy\">.</span><span class=\"crayon-sy\">`</span><span class=\"crayon-v\">err</span><span class=\"crayon-o\">-</span><span class=\"crayon-v\">code</span><span class=\"crayon-sy\">`</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">payload</span><span class=\"crayon-sy\">.</span><span class=\"crayon-v\">messageId</span><span class=\"crayon-sy\">]</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9c0bcd7bc5a043684490-2\">&nbsp;</div></div></td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t</div>\r\n<!-- [Format Time: 0.0002 seconds] -->\r\n<p></p>\n<p>Connect this <strong>change</strong> node into the <strong>/receipt</strong> webhook, then follow with a <strong>GSheet</strong> node.</p>\n<h4>Write Your Data to the Google Sheet</h4>\n<p>Add another worksheet(tab) to your Google Sheet and make a note of its name &#8211; will be &#8220;Sheet2&#8221; by default.</p>\n<p>Next, head back over to your Node-RED editor and open up the <strong>GSheet</strong> node properties. Select your credentials from the <em>creds</em> drop-down, select <strong>Append Row</strong> as a <em>Method</em>, fill in your <em>SpreadsheetID</em>, then specify the cell range where you&#8217;d like the data to be written. In my case this will be <em>Sheet2!A:E</em>, as I&#8217;d like the data to be spread accross columns A-E on worksheet &#8220;Sheet2&#8221;.</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/google-sheets-append-row-setup.png\" alt=\"google sheets append row setup\" class=\"alignnone size-full wp-image-31528\" /></p>\n<p>When you&#8217;re ready, click <em>Done</em> and <em>Deploy</em>, then run your flow again.</p>\n<p>🎉Congratulations! Your Delivery Receipts have now been logged onto the second worksheet of your spreadsheet. Head over to your Google Sheet and check them out!</p>\n<p><img src=\"https://www.nexmo.com/wp-content/uploads/2020/03/google-sheets-delivery-receipts-logged.png\" alt=\"google sheets delivery receipts logged\" class=\"alignnone size-full wp-image-31529\" /></p>\n<h3>Further Hack Ideas</h3>\n<p>Tired of having to open up your Node-RED Editor to start your flow? Experiment with different ways to kick it off!</p>\n<ul>\n<li>Try replacing the <strong>inject</strong> node with an <a href=\"https://www.nexmo.com/blog/2019/04/24/receive-sms-messages-node-red-dr/\">inbound SMS</a> webhook. Send an SMS to your Nexmo number to achieve your task!</li>\n<li><a href=\"https://www.nexmo.com/blog/2019/05/09/receive-phone-calls-node-red-dr/\">Inbound calls</a> would be another great option! You could even build on it and set up an <a href=\"https://www.nexmo.com/blog/2020/01/08/interactive-voice-response-node-red-dr\">Interactive Voice Response Menu</a></li>\n<li>Set up a user interface using the <a href=\"https://flows.nodered.org/node/node-red-dashboard\">dashboard nodes</a></li>\n</ul>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://developer.nexmo.com/api/sms\">SMS API Reference</a></li>\n<li><a href=\"https://www.nexmo.com/blog/2019/07/03/ngrok-in-node-red-dr/\">Getting Started with Ngrok in Node-RED</a></li>\n<li>Get a better understanding of <a href=\"https://developer.nexmo.com/messaging/sms/guides/delivery-receipts\">delivery receipts</a></li>\n<li><a href=\"https://mustache.github.io/\">Mustache templating</a></li>\n<li><a href=\"http://docs.jsonata.org/overview.html\">JSONata Docs</a></li>\n<li><a href=\"https://try.jsonata.org/\">JSONata Exerciser</a></li>\n</ul>\n<h3>Try Another Tutorial</h3>\n<ul>\n<li><a href=\"https://www.nexmo.com/blog/2020/01/08/interactive-voice-response-node-red-dr\">How to Build an IVR using Node-RED and the Nexmo APIs</a></li>\n<li><a href=\"https://www.nexmo.com/blog/2019/11/14/build-voicemail-node-red-voice-api-dr\">Build Your Own Voicemail With Node-RED and the Nexmo Voice API</a></li>\n<li><a href=\"https://www.nexmo.com/blog/2019/10/17/forward-call-via-voice-proxy-node-red-dr\">Forward a Call via a Voice Proxy with Node-RED</a></li>\n<li><a href=\"https://www.nexmo.com/blog/2019/10/07/conference-call-node-red-dr\">Build a Conference Call with Node-RED</a></li>\n<li><a href=\"https://www.nexmo.com/blog/2019/09/25/verify-phone-numbers-with-node-red-dr\">Verify Phone Numbers with Node-RED</a></li>\n<li><a href=\"https://www.nexmo.com/blog/2019/07/15/stream-audio-node-red-dr\">How to Stream Audio into a Call with Node-RED</a></li>\n<li><a href=\"https://www.nexmo.com/blog/2019/06/14/make-text-to-speech-phone-calls-node-red-dr/\">How to Make Text-to-Speech Phone Calls with Node-RED</a></li>\n<li><a href=\"https://www.nexmo.com/blog/2019/05/09/receive-phone-calls-node-red-dr/\">How to Receive Phone Calls with Node-RED</a></li>\n<li><a href=\"https://www.nexmo.com/blog/2019/04/17/send-sms-messages-node-red-dr/\">How to Send SMS Messages with Node-RED</a></li>\n<li><a href=\"https://www.nexmo.com/blog/2019/04/24/receive-sms-messages-node-red-dr/\">How to Receive SMS Messages with Node-RED</a></li>\n</ul>\n<p><script>\nwindow.addEventListener('DOMContentLoaded', (event) => {\n    document.querySelectorAll(\".gif-player\").forEach(image => {\n        image.src = image.src.replace(/\\.gif$/g, \".png\")\n        image.addEventListener(\"click\", (event) => {\n            if (event.target.src.indexOf(\".gif\") > 0) {\n                image.src = image.src.replace(/\\.gif$/g, \".png\")\n            } else {\n                image.src = image.src.replace(/\\.png$/g, \".gif\")\n            }\n        })\n    })\n});\n</script></p>\n<style>\n.gif-player {\n  cursor: pointer;\n}\nimg.alignnone {\n  border-width: 0px !important;\n}\n</style>\n"}