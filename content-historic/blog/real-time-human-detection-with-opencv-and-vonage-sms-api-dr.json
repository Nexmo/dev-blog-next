{"_filedata":{"slug":"real-time-human-detection-with-opencv-and-vonage-sms-api-dr"},"title":"Real-Time Human Detection with OpenCV and Vonage SMS API","description":"","thumbnail":"https://www.nexmo.com/wp-content/uploads/2020/04/Social_Human-Detection_1200x627.png","author":372,"published":true,"published_at":"2020-04-15T14:08:48","tags":[1711,92],"body":"This blog post will show how to build your own “smart” video camera. It will show how to take an image from the frame of a web camera, detect if there is a human in the frame, and send out an SMS via Vonage Communication APIs to notify you about potential threats.\n\n## Introduction\n\nThis idea came to me after my parents’ house was burglarized. They live in a remote location with no security cameras, and the police were never able to find who committed the crime. After this, my parents decided to equip the house with some security equipment. I was a college student at the time, so I decided to take it upon myself to use my skills to build a security system for them.\n\nFeel free to reach out to me as I have fully developed this into [a working prototype](https://github.com/behei/opencv_sms) that has been utilized by my family!\n\n## Hardware requirements\n\nYou will need to use a Raspberry Pi (I used a [Raspberry Pi 2](https://www.raspberrypi.org/products/raspberry-pi-2-model-b/)), a [Raspberry Pi camera](https://www.raspberrypi.org/products/camera-module-v2/), and a [“dummy” security camera](https://www.amazon.com/WALI-Security-Camera-Flashing-SDW-2/dp/B075JR53K5/ref=sr_1_7?crid=3GGNV7QL0DSHA&dchild=1&keywords=dummy+security+camera&qid=1585421371&sprefix=dummy+securi%2Caps%2C204&sr=8-7).\n\n## Prerequisites\n\nTo build this project, you’re going to need the following things in addition to the hardware:\n\n*   [OpenCV Python library](https://pypi.org/project/opencv-python/)\n*   [Vonage Communication APIs (formerly known as Nexmo) account](https://dashboard.nexmo.com/sign-up?utm_source=DEV_REL&utm_medium=github&utm_campaign=https://github.com/behei/opencv_sms)\n*   Vonage SMS [documentation](https://developer.nexmo.com/messaging/sms/overview)\n\n## The Object Detection Algorithm\n\nIn this tutorial, we will use the Haar classifier. It is an effective object detection method developed by Paul Viola and Michael Jones in their 2001 paper, “Rapid Object Detection using a Boosted Cascade of Simple Features.”\n\nInitially, the algorithm needs a lot of positive images (in our case, images of various people) and negative images (images that do not contain a human on the frame) to train the classifier.\n\nFrom there, we have to grab certain features from the classifier. Each feature is a single value obtained by subtracting the sum of pixels under the white rectangle from the sum of pixels under the black triangle.\n\nRead more about the Cascade Classifier, and the algorithm behind it, in this [OpenCV: Cascade Classifier article](https://docs.opencv.org/3.4/db/d28/tutorial_cascade_classifier.html).\n\n## Implementation\n\nOn your Raspberry Pi, create a new Python file and import all the needed libraries using the following import statements:\n\n<textarea wrap=\"soft\" class=\"crayon-plain print-no\" data-settings=\"dblclick\" readonly=\"\" style=\"-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 22px !important;\">import cv2 import nexmo import time</textarea>\n\n<table class=\"crayon-table\"><tbody><tr class=\"crayon-row\"><td class=\"crayon-nums \" data-settings=\"show\"><div class=\"crayon-nums-content\" style=\"font-size: 14px !important; line-height: 22px !important;\"><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801cc1884093326-1\">1</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801cc1884093326-2\">2</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801cc1884093326-3\">3</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801cc1884093326-4\">4</div></div></td><td class=\"crayon-code\"><div class=\"crayon-pre\" style=\"font-size: 14px !important; line-height: 22px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;\"><div class=\"crayon-line\" id=\"crayon-5e9ddc1801cc1884093326-1\"><span class=\"crayon-e\">import </span><span class=\"crayon-e\">cv2</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801cc1884093326-2\"><span class=\"crayon-e\">import </span><span class=\"crayon-e\">nexmo</span></div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801cc1884093326-3\"><span class=\"crayon-e\">import </span><span class=\"crayon-i\">time</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801cc1884093326-4\">&nbsp;</div></div></td></tr></tbody></table>\n\nThese libraries are used to detect people, to communicate to the users about the people detected, and to calculate the time difference between sent texts.\n\nAfter that, we will need to start capturing the video footage from your available camera:\n\n<textarea wrap=\"soft\" class=\"crayon-plain print-no\" data-settings=\"dblclick\" readonly=\"\" style=\"-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 22px !important;\">video_captured = cv2.VideoCapture(0)</textarea>\n\n<table class=\"crayon-table\"><tbody><tr class=\"crayon-row\"><td class=\"crayon-nums \" data-settings=\"show\"><div class=\"crayon-nums-content\" style=\"font-size: 14px !important; line-height: 22px !important;\"><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801cc8691906286-1\">1</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801cc8691906286-2\">2</div></div></td><td class=\"crayon-code\"><div class=\"crayon-pre\" style=\"font-size: 14px !important; line-height: 22px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;\"><div class=\"crayon-line\" id=\"crayon-5e9ddc1801cc8691906286-1\"><span class=\"crayon-v\">video_captured</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">=</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">cv2</span><span class=\"crayon-sy\">.</span><span class=\"crayon-e\">VideoCapture</span><span class=\"crayon-sy\">(</span><span class=\"crayon-cn\">0</span><span class=\"crayon-sy\">)</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801cc8691906286-2\">&nbsp;</div></div></td></tr></tbody></table>\n\nSpecifying 0 in the parameter above means that we will be using the first available video camera—usually, there is only one available, but if you have an external camera plugged in, you can specify which stream to use by passing the appropriate parameter to VideoCapture.\n\nNow, let’s initialize the Vonage API SMS client. For this, you’ll need your API key and secret that can be found in the dashboard of the Vonage API account you created:\n\n<textarea wrap=\"soft\" class=\"crayon-plain print-no\" data-settings=\"dblclick\" readonly=\"\" style=\"-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 22px !important;\">client_nexmo = nexmo.Client(key=’your_project_key’, secret=’your_secret_key’)</textarea>\n\n<table class=\"crayon-table\"><tbody><tr class=\"crayon-row\"><td class=\"crayon-nums \" data-settings=\"show\"><div class=\"crayon-nums-content\" style=\"font-size: 14px !important; line-height: 22px !important;\"><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801cca440478091-1\">1</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801cca440478091-2\">2</div></div></td><td class=\"crayon-code\"><div class=\"crayon-pre\" style=\"font-size: 14px !important; line-height: 22px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;\"><div class=\"crayon-line\" id=\"crayon-5e9ddc1801cca440478091-1\"><span class=\"crayon-v\">client_nexmo</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">=</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">nexmo</span><span class=\"crayon-sy\">.</span><span class=\"crayon-e\">Client</span><span class=\"crayon-sy\">(</span><span class=\"crayon-v\">key</span><span class=\"crayon-o\">=</span>’<span class=\"crayon-v\">your_project</span><span class=\"crayon-sy\">_</span>key’<span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">secret</span><span class=\"crayon-o\">=</span>’<span class=\"crayon-v\">your_secret</span><span class=\"crayon-sy\">_</span>key’<span class=\"crayon-sy\">)</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801cca440478091-2\">&nbsp;</div></div></td></tr></tbody></table>\n\nAfter this, we will load the already pre-trained classifier. The classifier used in this tutorial can be accessed by following the [link](https://github.com/opencv/opencv/tree/master/data/haarcascades) and grabbing the classifier you would like to use in your project.\n\nWe will be using the `haarcascade_fullbody.xml` classifier.\n\nFor testing purposes, and to make it easier to include proper screenshots, I used the `haarcascade_frontalface_default.xml` classifier in [my example repo](https://github.com/behei/opencv_sms), but the `haarcascade_fullbody.xml` classifier is the most appropriate for the security camera use case.\n\n<textarea wrap=\"soft\" class=\"crayon-plain print-no\" data-settings=\"dblclick\" readonly=\"\" style=\"-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 22px !important;\">classifier = cv2.CascadeClassifier('haarcascade/haarcascade_fullbody.xml')</textarea>\n\n<table class=\"crayon-table\"><tbody><tr class=\"crayon-row\"><td class=\"crayon-nums \" data-settings=\"show\"><div class=\"crayon-nums-content\" style=\"font-size: 14px !important; line-height: 22px !important;\"><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801ccd357792452-1\">1</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801ccd357792452-2\">2</div></div></td><td class=\"crayon-code\"><div class=\"crayon-pre\" style=\"font-size: 14px !important; line-height: 22px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;\"><div class=\"crayon-line\" id=\"crayon-5e9ddc1801ccd357792452-1\"><span class=\"crayon-v\">classifier</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">=</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">cv2</span><span class=\"crayon-sy\">.</span><span class=\"crayon-e\">CascadeClassifier</span><span class=\"crayon-sy\">(</span><span class=\"crayon-s\">'haarcascade/haarcascade_fullbody.xml'</span><span class=\"crayon-sy\">)</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801ccd357792452-2\">&nbsp;</div></div></td></tr></tbody></table>\n\nMost of the detection happens in the following piece of code:\n\n<textarea wrap=\"soft\" class=\"crayon-plain print-no\" data-settings=\"dblclick\" readonly=\"\" style=\"-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 22px !important;\">while (True): # read frame-by-frame ret, frame = video_captured.read() # set the frame to gray as we do not need color, save up the resources gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) # pass the frame to the classifier persons_detected = classifier.detectMultiScale(gray_frame, 1.3, 5) # check if people were detected on the frame try: human_count = persons_detected.shape[0] else: human_count = 0 # extract boxes so we can visualize things better # for actual deployment with hardware, not needed for (x, y, w, h) in persons_detected: cv2.rectangle(frame, (x,y), (x+w, y+h), (255, 0, 0), 2) cv2.imshow('Video footage', frame) if (cv2.waitKey(1) &amp; 0xFF == ord('q')): break</textarea>\n\n<table class=\"crayon-table\"><tbody><tr class=\"crayon-row\"><td class=\"crayon-nums \" data-settings=\"show\"><div class=\"crayon-nums-content\" style=\"font-size: 14px !important; line-height: 22px !important;\"><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801ccf380075617-1\">1</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801ccf380075617-2\">2</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801ccf380075617-3\">3</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801ccf380075617-4\">4</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801ccf380075617-5\">5</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801ccf380075617-6\">6</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801ccf380075617-7\">7</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801ccf380075617-8\">8</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801ccf380075617-9\">9</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801ccf380075617-10\">10</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801ccf380075617-11\">11</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801ccf380075617-12\">12</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801ccf380075617-13\">13</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801ccf380075617-14\">14</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801ccf380075617-15\">15</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801ccf380075617-16\">16</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801ccf380075617-17\">17</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801ccf380075617-18\">18</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801ccf380075617-19\">19</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801ccf380075617-20\">20</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801ccf380075617-21\">21</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801ccf380075617-22\">22</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801ccf380075617-23\">23</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801ccf380075617-24\">24</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801ccf380075617-25\">25</div></div></td><td class=\"crayon-code\"><div class=\"crayon-pre\" style=\"font-size: 14px !important; line-height: 22px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;\"><div class=\"crayon-line\" id=\"crayon-5e9ddc1801ccf380075617-1\"><span class=\"crayon-st\">while</span><span class=\"crayon-h\"> </span><span class=\"crayon-sy\">(</span><span class=\"crayon-t\">True</span><span class=\"crayon-sy\">)</span><span class=\"crayon-o\">:</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801ccf380075617-2\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-p\"># read frame-by-frame</span></div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801ccf380075617-3\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-v\">ret</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">frame</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">=</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">video_captured</span><span class=\"crayon-sy\">.</span><span class=\"crayon-e\">read</span><span class=\"crayon-sy\">(</span><span class=\"crayon-sy\">)</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801ccf380075617-4\">&nbsp;</div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801ccf380075617-5\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-p\"># set the frame to gray as we do not need color, save up the resources</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801ccf380075617-6\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-v\">gray_frame</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">=</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">cv2</span><span class=\"crayon-sy\">.</span><span class=\"crayon-e\">cvtColor</span><span class=\"crayon-sy\">(</span><span class=\"crayon-v\">frame</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">cv2</span><span class=\"crayon-sy\">.</span><span class=\"crayon-v\">COLOR_BGR2GRAY</span><span class=\"crayon-sy\">)</span></div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801ccf380075617-7\">&nbsp;</div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801ccf380075617-8\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-p\"># pass the frame to the classifier</span></div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801ccf380075617-9\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-v\">persons_detected</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">=</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">classifier</span><span class=\"crayon-sy\">.</span><span class=\"crayon-e\">detectMultiScale</span><span class=\"crayon-sy\">(</span><span class=\"crayon-v\">gray_frame</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-cn\">1.3</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-cn\">5</span><span class=\"crayon-sy\">)</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801ccf380075617-10\">&nbsp;</div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801ccf380075617-11\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-p\"># check if people were detected on the frame</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801ccf380075617-12\"><span class=\"crayon-st\">try</span><span class=\"crayon-o\">:</span></div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801ccf380075617-13\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-v\">human_count</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">=</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">persons_detected</span><span class=\"crayon-sy\">.</span><span class=\"crayon-v\">shape</span><span class=\"crayon-sy\">[</span><span class=\"crayon-cn\">0</span><span class=\"crayon-sy\">]</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801ccf380075617-14\"><span class=\"crayon-st\">else</span><span class=\"crayon-o\">:</span></div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801ccf380075617-15\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-v\">human_count</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">=</span><span class=\"crayon-h\"> </span><span class=\"crayon-cn\">0</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801ccf380075617-16\">&nbsp;</div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801ccf380075617-17\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-p\"># extract boxes so we can visualize things better</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801ccf380075617-18\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-p\"># for actual deployment with hardware, not needed</span></div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801ccf380075617-19\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-st\">for</span><span class=\"crayon-h\"> </span><span class=\"crayon-sy\">(</span><span class=\"crayon-v\">x</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">y</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">w</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">h</span><span class=\"crayon-sy\">)</span><span class=\"crayon-h\"> </span><span class=\"crayon-st\">in</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">persons_detected</span><span class=\"crayon-o\">:</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801ccf380075617-20\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-v\">cv2</span><span class=\"crayon-sy\">.</span><span class=\"crayon-e\">rectangle</span><span class=\"crayon-sy\">(</span><span class=\"crayon-v\">frame</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-sy\">(</span><span class=\"crayon-v\">x</span><span class=\"crayon-sy\">,</span><span class=\"crayon-v\">y</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-sy\">(</span><span class=\"crayon-v\">x</span><span class=\"crayon-o\">+</span><span class=\"crayon-v\">w</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">y</span><span class=\"crayon-o\">+</span><span class=\"crayon-v\">h</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-sy\">(</span><span class=\"crayon-cn\">255</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-cn\">0</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-cn\">0</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-cn\">2</span><span class=\"crayon-sy\">)</span><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801ccf380075617-21\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-v\">cv2</span><span class=\"crayon-sy\">.</span><span class=\"crayon-e\">imshow</span><span class=\"crayon-sy\">(</span><span class=\"crayon-s\">'Video footage'</span><span class=\"crayon-sy\">,</span><span class=\"crayon-h\"> </span><span class=\"crayon-v\">frame</span><span class=\"crayon-sy\">)</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801ccf380075617-22\">&nbsp;</div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801ccf380075617-23\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-st\">if</span><span class=\"crayon-h\"> </span><span class=\"crayon-sy\">(</span><span class=\"crayon-v\">cv2</span><span class=\"crayon-sy\">.</span><span class=\"crayon-e\">waitKey</span><span class=\"crayon-sy\">(</span><span class=\"crayon-cn\">1</span><span class=\"crayon-sy\">)</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">&amp;</span><span class=\"crayon-h\"> </span><span class=\"crayon-cn\">0xFF</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">==</span><span class=\"crayon-h\"> </span><span class=\"crayon-e\">ord</span><span class=\"crayon-sy\">(</span><span class=\"crayon-s\">'q'</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">)</span><span class=\"crayon-o\">:</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801ccf380075617-24\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-st\">break</span></div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801ccf380075617-25\">&nbsp;</div></div></td></tr></tbody></table>\n\nWe read each frame from our captured video stream. It is also a good idea to convert it to gray to conserve resources. Once that is done, we pass the frame to the classifier to see if there is a person detected. If that is the case, a rectangle is drawn on the frame around the detected person.\n\nPlease see an example below of my face being detected:\n\n[![](https://www.nexmo.com/wp-content/uploads/2020/04/pasted-image-0.png)](https://www.nexmo.com/wp-content/uploads/2020/04/pasted-image-0.png)\n\nIf you load a different classifier, such as `upperbody.xml` or `fullbody.xm`l, you’ll be able to use the same code for the detection.\n\nPlease note that the full-body classifier only recognizes the person on the frame if all of the body is in the frame. Just the face and/or upper body would not work. The same goes for the upper body classifier—just having the face in the frame would not result in a successful detection.\n\nThis comes from a limitation in the classifiers provided by OpenCV. You can always attempt to train your own classifiers; that can take extra time and resources, but it is a good way to build on this project if you’re interested in learning more about that side of things.\n\nNow, let’s add Vonage SMS API capabilities into our application so that the user can be notified if there is a stranger detected on their video frame.\n\n_**Note**: It is important to add delay to this (especially while testing) so that the user does not get a lot of SMS messages for one detection event._\n\nIn our example, we will be using a `time.sleep(number of seconds)` method to do so; however, feel free to develop your own more sophisticated method if you have one.\n\nAdd the following code after the try/else block in the code:\n\n<textarea wrap=\"soft\" class=\"crayon-plain print-no\" data-settings=\"dblclick\" readonly=\"\" style=\"-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 14px !important; line-height: 22px !important;\">if (human_count &gt; 0): client_nexmo.send_message({ 'from': ‘your_outbound_phone_number’, 'to': ‘your_inbound_phone_number’, 'text': 'There has been ' + str(human_count) + ' human(s) detected!', })</textarea>\n\n<table class=\"crayon-table\"><tbody><tr class=\"crayon-row\"><td class=\"crayon-nums \" data-settings=\"show\"><div class=\"crayon-nums-content\" style=\"font-size: 14px !important; line-height: 22px !important;\"><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801cd1295896385-1\">1</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801cd1295896385-2\">2</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801cd1295896385-3\">3</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801cd1295896385-4\">4</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801cd1295896385-5\">5</div><div class=\"crayon-num crayon-striped-num\" data-line=\"crayon-5e9ddc1801cd1295896385-6\">6</div><div class=\"crayon-num\" data-line=\"crayon-5e9ddc1801cd1295896385-7\">7</div></div></td><td class=\"crayon-code\"><div class=\"crayon-pre\" style=\"font-size: 14px !important; line-height: 22px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;\"><div class=\"crayon-line\" id=\"crayon-5e9ddc1801cd1295896385-1\"><span class=\"crayon-st\">if</span><span class=\"crayon-h\"> </span><span class=\"crayon-sy\">(</span><span class=\"crayon-v\">human_count</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">&gt;</span><span class=\"crayon-h\"> </span><span class=\"crayon-cn\">0</span><span class=\"crayon-sy\">)</span><span class=\"crayon-o\">:</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801cd1295896385-2\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-v\">client_nexmo</span><span class=\"crayon-sy\">.</span><span class=\"crayon-e\">send_message</span><span class=\"crayon-sy\">(</span><span class=\"crayon-sy\">{</span></div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801cd1295896385-3\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-s\">'from'</span><span class=\"crayon-o\">:</span><span class=\"crayon-h\"> </span>‘<span class=\"crayon-v\">your_outbound_phone</span><span class=\"crayon-sy\">_</span>number’<span class=\"crayon-sy\">,</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801cd1295896385-4\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-s\">'to'</span><span class=\"crayon-o\">:</span><span class=\"crayon-h\"> </span>‘<span class=\"crayon-v\">your_inbound_phone</span><span class=\"crayon-sy\">_</span>number’<span class=\"crayon-sy\">,</span></div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801cd1295896385-5\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-s\">'text'</span><span class=\"crayon-o\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-s\">'There has been '</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">+</span><span class=\"crayon-h\"> </span><span class=\"crayon-e\">str</span><span class=\"crayon-sy\">(</span><span class=\"crayon-v\">human_count</span><span class=\"crayon-sy\">)</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">+</span><span class=\"crayon-h\"> </span><span class=\"crayon-s\">' human(s) detected!'</span><span class=\"crayon-sy\">,</span></div><div class=\"crayon-line crayon-striped-line\" id=\"crayon-5e9ddc1801cd1295896385-6\"><span class=\"crayon-h\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"crayon-sy\">}</span><span class=\"crayon-sy\">)</span></div><div class=\"crayon-line\" id=\"crayon-5e9ddc1801cd1295896385-7\">&nbsp;</div></div></td></tr></tbody></table>\n\nThe SMS will only be sent out if there is at least one human detected on the frame.  \nTo make sure that we don’t send out too many messages, we will put the thread to sleep for about five seconds and look for the person in the frame afterward.\n\nThat’s it! In just 50 lines of code, you are ready to detect people snooping on your property and be conveniently notified when that happens, using the Vonage SMS API.\n\nThe source code to this post can be found at the following [GitHub link](https://github.com/behei/opencv_sms). I have also included the Haar Cascade classifiers used in this project so you can get up and running quickly.\n\n## Potential Improvements\n\nOf course, there is more that can be done to make this project more sophisticated and efficient.\n\nFirstly, the `time.sleep()` method means that there is at least a five-second gap between the frame analysis which is not an ideal situation and could be improved. It would also be a good idea to crop the video frame image that you receive from the camera down to just a specific detection area in order to improve the efficiency of the detection—less pixels to check means faster detections.\n\n### References\n\n[https://docs.opencv.org/master/db/d28/tutorial\\_cascade\\_classifier.html](https://docs.opencv.org/master/db/d28/tutorial_cascade_classifier.html)  \n[https://opencv-python-tutroals.readthedocs.io/en/latest/py\\_tutorials/py\\_gui/py\\_video\\_display/py\\_video\\_display.html](https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_gui/py_video_display/py_video_display.html)  \n[https://github.com/opencv/opencv/tree/master/data/haarcascades](https://github.com/opencv/opencv/tree/master/data/haarcascades)"}